import 'package:dynamic_forms_and_charts_app/theme/colors.dart';
import 'package:dynamic_forms_and_charts_app/utils/Utils.dart';
import 'package:dynamic_forms_and_charts_app/view_models/field_view_model.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class DynamicFieldsScreen extends StatefulWidget {
  const DynamicFieldsScreen({super.key});

  @override
  State<DynamicFieldsScreen> createState() => _DynamicFieldsScreenState();
}

class _DynamicFieldsScreenState extends State<DynamicFieldsScreen> {
  /* global key is used to provide unique identity to a widget.
  * it is specific the form state of the form widget.
  * it can access the state of widget tree, that is far 
  * away from widget hierarchy */
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(Utils.dynamicFieldsScreenTitle),
        automaticallyImplyLeading: false,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Consumer<FieldViewModel>(
          builder: (context, fieldProvider, child) {
            return Form(
              key: _formKey,
              child: SingleChildScrollView(
                child: Column(
                  children: [
                    /* using spread operator in here, because it is used to flatten list 
                    *  of widgets generated by this list.generate dynamic method. The Spread
                    *  operator spreads the elements of iterable into another collection */
                    ...List.generate(
                      fieldProvider.controllers.length,
                      (index) => Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: TextFormField(
                          controller: fieldProvider.controllers[index],
                          decoration: InputDecoration(
                            labelText: 'Field ${index + 1}',
                          ),
                          keyboardType: TextInputType.number,
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return Utils.fieldsValueNotBeEmpty;
                            }

                            final number = double.tryParse(value);
                            if (number == null ||
                                number.isNaN ||
                                number.isInfinite) {
                              return Utils.fieldsValueValidNumber;
                            }
                            return null;
                          },
                        ),
                      ),
                    ),
                    const SizedBox(
                      height: 20,
                    ),
                    Center(
                      child: ElevatedButton(
                        onPressed: () {
                          if (fieldProvider.controllers.isNotEmpty) {
                            if (_formKey.currentState!.validate()) {
                              for (var controller
                                  in fieldProvider.controllers) {
                                final value = double.tryParse(controller.text);
                                if (value != null &&
                                    !value.isNaN &&
                                    !value.isInfinite) {
                                  fieldProvider.insertField(
                                    'Field ${fieldProvider.controllers.indexOf(controller) + 1}',
                                    value,
                                  );
                                } else {
                                  Utils.showSnackBar(
                                      context, Utils.invalidFieldValueText);
                                  return;
                                }
                              }

                              for (var controller
                                  in fieldProvider.controllers) {
                                controller.clear();
                              }

                              Utils.showSnackBar(
                                  context, Utils.fieldsSavedSuccess);
                            }
                          } else {
                            Utils.showSnackBar(context, Utils.addFieldText);
                          }
                        },
                        child: const Text(
                          Utils.saveFieldsText,
                          style: TextStyle(color: AppColors.backgroundColor),
                        ),
                      ),
                    ),
                    const SizedBox(
                      height: 20,
                    ),
                    Center(
                      child: ElevatedButton(
                        onPressed: () {
                          if (fieldProvider.fields.isNotEmpty) {
                            Navigator.pushNamed(context, '/charts');
                          } else {
                            Utils.showSnackBar(context, Utils.addFieldText);
                          }
                        },
                        child: const Text(
                          Utils.showChartText,
                          style: TextStyle(color: AppColors.backgroundColor),
                        ),
                      ),
                    )
                  ],
                ),
              ),
            );
          },
        ),
      ),
      floatingActionButton: Consumer<FieldViewModel>(
        builder: (context, fieldProvider, child) {
          return FloatingActionButton(
            onPressed: () {
              // only add new field if num. of fields is less than 5
              if (fieldProvider.controllers.length < 5) {
                fieldProvider.addController();
              } else {
                // show error message if num. of fields is 5 or more
                Utils.showSnackBar(context, Utils.fiveFieldsAllowedText);
              }
            },
            child: const Icon(Icons.add),
          );
        },
      ),
    );
  }
}
